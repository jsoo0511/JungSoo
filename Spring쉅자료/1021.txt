1021
Spring @MVC
 - Spring을 이용한 웹 애플리케이션 개발
 - 웹 부분은 Annotation 기반으로 작성해서 @MVC라고 부름
 
 - DispatcherServlet을 MainController로 하는 FrontController 패턴
 - 1. 모든 request 접수
 - 2. 요청을 처리할 수 있는 controller 확인(by HandlerMapping)
      - 대상 controller 리턴
 - 3. HandlerAdapter를 이용해서 해당 controller 실행 요청
 - 4. HandlerAdapter가 controller 실행
 - 5. 파라미터 분석 후 Model(Service - Repository) 호출
 - 6. Model의 동작 결과 값중 클라이언트에게 전달할 값을
       Model(Request Scope)에 저장
 - 7. 결과를 확인할 logical한 view 이름(jsp 이름)을 D.S에 반환
 - 8. D.S가 ViewResolver에게 view 이름 전달
 - 9. ViewResolver가 뷰 실행       
       
       
- web.xml 분석
 <context-param> : 컨텍스트가 초기화될 때 사용하는 속성 지정
 contextConfigLocation:  classpath:spring/application-config.xml
  - 애플리케이션의 전체적인 구조를 담당하는 xml (백앤드 설정: model 등)
  
  dispatcherServlet: 스프링 @MVC의 유일한 servlet
  - front controller  
  - init-param(서블릿 초기화 변수): contextConfigLocation초기화
     /WEB-INF/mvc-config.xml (웹과 관련된 설정 처리:  controller 등)
     
  Context-param에 의해서 백앤드 설정이 모두 끝난 후 DispatcherServlet 동작
  및 초기화 진행     
     

 - 클라이언트 호출에 대비한 annotation
  @RequestMapping - service()와 동일한 역할,method를 통해서 get/post 지정
  - HttpMethod 별로 다양한 annotation 사용 가능
  - class level에서 사용: 클래스에 소속된 모든 요청에 영향
  
  @GetMapping, @PostMapping, @DeleteMapping, @PutMapping
  
 - RequestMapping 메서드의 파라미터 작성
   - @RequestParam : 전달된 파라미터 설정
                     파라미터와 동일한 이름의 변수를 사용할 때는 생략 가능
                     변수의 타입에 맞춰 자동 형변환 진행
                     파라미터로 DTO 전달 가능
                     
   - Model: 화면에서 보여줄 데이터 저장 영역(HttpServletRequest Scope)    

   - 필요 시 HttpServletRequest, HttpServletResponse, HttpSession 사용 가능                  
     
   - @PathVariable : REST를 위해서 등장: url 자체에 변수 내장
    http://localhost:8080/user/hong  < get?  	- select	: url
    http://localhost:8080/user/      < post? 	- insert	: request body
    http://localhost:8080/user/hong  < delete? 	- delete	: url
    http://localhost:8080/user/hong  < put? 	- update	: url + request body
   
   - @CookieValue: 쿠키를 이름 기반으로 참조 가능 
    
파라미터의 한글 처리:
	CharacterEncodingFilter 를 Web.xml에 등록   

정적 리소스 연결(js, css)
 - WEB-INF/view 아래있는 ViewResolver를 이용한 호출 뿐 아니라 
   index.jsp 등 컨트롤러를 통하지 않는것까지 적용 가능
 
 - web-app 하위의 정적 리소스 연결        
   <!-- location: 실제 물리 경로, mapping: 연결할 가상 경로 -->
   <mvc:resources location="/WEB-INF/css/" mapping="/css/**"></mvc:resources>
        
- Interceptor    
  : 필터와 유사하게 동작
  : Controller 메서드들이 동작하기 전, 후의 동작을 가로채서 전/후처리    
        
        
        
        
        
       